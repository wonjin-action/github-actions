name: cicd-1

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev]
    paths:
      - '*/**'

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: |
          cd next-app
          npm ci
      - name: Build with npm
        run: |
          cd next-app/cdk
          npm install
          npm run build
      - name: Install CDK dependencies
        run: |
          cd next-app/cdk
          npm install aws-cdk-lib
          npm install -g aws-cdk

  image-build:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      REPO_URL: ${{ steps.get_ecr_repo_url_and_tag.outputs.REPO_URL }}
      TAG: ${{ steps.get_ecr_repo_url_and_tag.outputs.TAG }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      # - name: Configure AWS Credentials
      #   id: credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-region: ${{ vars.AWS_REGION }}
      #     role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      # Not Use OIDC
      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region ${{ vars.AWS_REGION }}

      - name: Install dependencies for Docker
        id: install_dependencies
        run: |
          npm ci
          npm install aws-cdk-lib --save-dev
          npm install @aws-cdk/aws-apigatewayv2-integrations-alpha
          npm install @aws-cdk/aws-apigatewayv2-alpha
        working-directory: next-app/
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
      - name: Get ECR Repo URL and Image Tag
        id: get_ecr_repo_url_and_tag
        run: |
          REPO_URL=$(aws ecr describe-repositories --repository-names hinagiku-dev-ecs-hinagikudevecsapphinagikudevecsbackendbackappecsresourcesrepoce5391e0-lm3igs4fy1sc --query 'repositories[].repositoryUri' --output text)
          echo "REPO_URL=$REPO_URL"
          echo "REPO_URL=$REPO_URL" >> $GITHUB_OUTPUT

          function generate_image_tag() {
            local -r tag=$(tar cf - ./* > /dev/null 2>&1 | md5sum | cut -c 1-8)
            echo "$tag"
          }
          TAG=$(generate_image_tag)
          echo "TAG=$TAG"
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
      - name: Prepare Lambda Deployment Package
        id: prepare_lambda_deployment
        run: |
          echo "Create docker_image_info.json in $(pwd)"
          jq -n --arg url "${{ steps.get_ecr_repo_url_and_tag.outputs.REPO_URL }}" --arg tag "${{ steps.get_ecr_repo_url_and_tag.outputs.TAG }}" '{"DOCKER_IMAGE_URL": $url, "TAG": $tag}' > docker_image_info.json
          cat docker_image_info.json
        working-directory: lambda
      - name: Save environment variables as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker_image_info
          path: lambda/docker_image_info.json
      - name: Docker build & push
        id: docker_build_push
        run: |
          docker build -f Dockerfile --tag ${{ steps.get_ecr_repo_url_and_tag.outputs.REPO_URL }}:${{ steps.get_ecr_repo_url_and_tag.outputs.TAG }} .
          docker push ${{ steps.get_ecr_repo_url_and_tag.outputs.REPO_URL }}:${{ steps.get_ecr_repo_url_and_tag.outputs.TAG }}
        working-directory: next-app/

  deploy:
    runs-on: ubuntu-latest
    needs: [image-build]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Download environment variables artifact
        uses: actions/download-artifact@v3
        with:
          name: docker_image_info
          path: '.lambda'
      - name: Load environment variables
        run: |
          DOCKER_IMAGE_INFO=$(cat lambda/docker_image_info.json)
          export REPO_URL=$(echo $DOCKER_IMAGE_INFO | jq -r '.DOCKER_IMAGE_URL')
          export TAG=$(echo $DOCKER_IMAGE_INFO | jq -r '.TAG')
          echo "REPO_URL=${{ needs.image-build.outputs.REPO_URL }}"
          echo "TAG=${{ needs.image-build.outputs.TAG }}"
        env:
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          BUCKET_NAME: ${{ env.BUCKET_NAME }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          export NODE_ENV=development
          npm ci
          npm install aws-cdk-lib --save-dev
          npm install @aws-cdk/aws-apigatewayv2-integrations-alpha
          npm install @aws-cdk/aws-apigatewayv2-alpha
        working-directory: next-app/cdk
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
      - name: Test AWS Credentials
        run: aws sts get-caller-identity
      - name: Get S3 Bucket Name from SSM
        id: get_s3_bucket_name
        run: |
          BUCKET_NAME=$(aws ssm get-parameter --name "/Hinagiku/TriggerBucket/Lambda-Bucket" --query "Parameter.Value" --output text)
          BACKEND_BUCKET_NAME=$(aws ssm get-parameter --name "/Hinagiku/TriggerBucket/EcsBackend" --query "Parameter.Value" --output text)
          echo "BUCKET_NAME=${BUCKET_NAME}" >> $GITHUB_ENV
          echo "BACKEND_BUCKET_NAME=$BACKEND_BUCKET_NAME" >> $GITHUB_ENV

      - name: List files in lambda
        run: ls -l lambda

      - name: Prepare Lambda Deployment Package
        run: |
          pwd
          jq -n --arg url "${{ needs.image-build.outputs.REPO_URL }}" --arg tag "${{ needs.image-build.outputs.TAG }}" '{"DOCKER_IMAGE_URL": $url, "TAG": $tag}' > docker_image_info.json
          cat docker_image_info.json
          zip -r image.zip docker_image_info.json lambda_function_config.json
          echo "zipped image.zip : "
          unzip -l image.zip

        working-directory: lambda

      - name: Upload to S3
        run: |
          aws s3 cp image.zip s3://$BUCKET_NAME/image.zip
          aws s3 cp image.zip s3://$BACKEND_BUCKET_NAME/image.zip
        working-directory: lambda
      - name: Setup tmate session
        if: always()
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 60
